/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package aspectminingtourismwithframe;

import java.io.File;
import java.io.FileInputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;

/**
 *
 * @author Elcot
 */
public class OrientationFinder extends javax.swing.JFrame {

    /**
     * Creates new form OrientationFinder
     */
    public static ArrayList aspectorientationFinderResults=new ArrayList();
    
    public OrientationFinder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Orientation Finder");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel1)
                .addContainerGap(236, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton1.setText("Orientation Finder");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Final Result");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            ArrayList aspectsidentification=AspectIdentification.aspectsidentification;
        
            System.out.println("*************************************3********************************************");
            System.out.println("Orientation Finder");
            System.out.println("**********************************************************************************");
            System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Temporary Work (Preprocessing) Start for Orientation Finder~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            DecimalFormat df=new DecimalFormat("#.####");
                //Get Slang Words
        
            ArrayList slang1=new ArrayList();
            ArrayList slang2=new ArrayList();
            try
            {
                File fe=new File("Slang.txt");
                FileInputStream fis=new FileInputStream(fe);
                byte data[]=new byte[fis.available()];
                fis.read(data);
                fis.close();
              
                String s1[]=new String(data).split("\n");            
            
                for(int i=0;i<s1.length;i++)
                {
                    String g1[]=s1[i].trim().split("#");
                    slang1.add(g1[0]);
                    slang2.add(g1[1]);
                }                    
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
            
                // Get Stop Words
        
            ArrayList stop1=new ArrayList();
            try
            {            
                File fe2=new File("stopwords1.txt");
                FileInputStream fis2=new FileInputStream(fe2);
                byte data2[]=new byte[fis2.available()];
                fis2.read(data2);
                fis2.close();
                
                String sg2[]=new String(data2).split("\n");
               
                for(int i=0;i<sg2.length;i++)
                    stop1.add(sg2[i].trim());
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
            
            String afterpre="";
            for(int i=0;i<aspectsidentification.size();i++)
            {
                String s=aspectsidentification.get(i).toString().trim();
                String sp2[]=s.trim().split(" --> ");
                String eachreview=sp2[1].trim().replaceAll("[^A-Za-z0-9\\s]", "").toLowerCase().trim();
                String g1[]=eachreview.trim().split(" ");
                String ro="";
                for(int j=0;j<g1.length;j++)
                {
                    if(!(stop1.contains(g1[j].trim())))         // for remove stop words
                    {
                        if(slang1.contains(g1[j].trim()))       // for replace slang words
                        {
                            int ind1=slang1.indexOf(g1[j].trim());
                            String replacedword=slang2.get(ind1).toString().trim();
                            ro=ro+replacedword.trim()+" ";                      
                        }
                        else
                        {
                            ro=ro+g1[j].trim()+" ";
                        }
                    }                    
                }
                if(!(ro.trim().equals("")))
                {
                    String row=ro.substring(0,ro.lastIndexOf(' '));
                    afterpre=afterpre+sp2[0].trim()+" --> "+row.trim()+"\n";                
                }
            }
            String afterpreprocessing=afterpre.substring(0,afterpre.lastIndexOf('\n'));
            System.out.println(afterpreprocessing.trim());
            System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Temporary Work (Preprocessing) Ends~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            ArrayList orientationFinderResults=new ArrayList();
            
                //////////// Read Posivie words for Algorithm 1
             
            File fe1=new File("Positive.txt");
            FileInputStream fis1=new FileInputStream(fe1);
            byte data1[]=new byte[fis1.available()];
            fis1.read(data1);
            fis1.close();            
            String sg1[]=new String(data1).split("\n");
            ArrayList posWd=new ArrayList();               
            for(int i=0;i<sg1.length;i++)
                posWd.add(sg1[i].trim());
             
                //////////// Read negative words  for Algorithm 1
             
            File fe2=new File("Negative.txt");
            FileInputStream fis2=new FileInputStream(fe2);
            byte data2[]=new byte[fis2.available()];
            fis2.read(data2);
            fis2.close();            
            String sg2[]=new String(data2).split("\n");
            ArrayList negWd=new ArrayList();               
            for(int i=0;i<sg2.length;i++)
                negWd.add(sg2[i].trim()); 
            
            Sentiwordnet swn=new Sentiwordnet("SentiWordNet_3.0.0.txt");        // for Algorithm 2
            
            String spc[]=afterpreprocessing.trim().split("\n");
            for(int i=0;i<spc.length;i++)
            {
                String sp1[]=spc[i].trim().split(" --> ");
                String g1[]=sp1[1].trim().split(" ");
                
                        //Algorithm 1: Word orientation
                
                double PScore=0;
                double NScore=0;                  
                for(int j=0;j<g1.length;j++)
                {
                    if(posWd.contains(g1[j].trim()))
                    {
                        PScore++;                        
                    }
                    if(negWd.contains(g1[j].trim()))
                    {
                        NScore++;                 
                    }                                     
                }                
                
                        //Algorithm 2: Opinion orientation
                
                double e1=0;
                for(int j=0;j<g1.length;j++)
                {
                    String g3=g1[j].trim();
                    try
                    {
                        e1=e1+swn.extract(g3, "a");                 // for words a-adjuctive        
                    }
                    catch(Exception e)
                    {                    
                        try
                        {
                            e1=e1+swn.extract(g3, "n");             // for aspects  n-noun
                        }
                        catch(Exception ex)
                        {
                            e1=e1+0;
                        }
                    }                       
                }
                if(!(PScore==NScore))       // Here we cannot consider neutral values
                {
                    PScore=(PScore+e1);
                    NScore=(NScore+e1);                  
                    orientationFinderResults.add(sp1[0].trim()+"\t"+df.format(PScore)+"\t"+df.format(NScore));
                }
            }
            System.out.println("**********************************************************************************");
            System.out.println("Orientation Finder Results for each reviews");
            System.out.println("**********************************************************************************");
            System.out.println("Aspect\tPositiveScore\tNegativeScore");
            ArrayList aspectsonly=new ArrayList();
            for(int i=0;i<orientationFinderResults.size();i++)
            {
                String s=orientationFinderResults.get(i).toString().trim();
                System.out.println(s.trim());
                String sk[]=s.trim().split("\t");
                if(!(aspectsonly.contains(sk[0].trim())))
                {
                    aspectsonly.add(sk[0].trim());
                }
            }
            System.out.println();
            
            System.out.println("**********************************************************************************");
            System.out.println("Orientation Finder Results for each aspects");
            System.out.println("**********************************************************************************");
            System.out.println("Aspect\tPositiveScore\tNegativeScore"); 
            String ro="";
            for(int j=0;j<aspectsonly.size();j++)
            {
                String s=aspectsonly.get(j).toString().trim();
                double posscore=0,negscore=0;
                for(int i=0;i<orientationFinderResults.size();i++)
                {
                    String s1[]=orientationFinderResults.get(i).toString().trim().split("\t");
                    if(s.trim().equals(s1[0].trim()))
                    {
                        posscore=posscore+Double.parseDouble(s1[1].trim());
                        negscore=negscore+Double.parseDouble(s1[2].trim());
                    }
                }
                aspectorientationFinderResults.add(s+"\t"+df.format(posscore)+"\t"+df.format(negscore));
                System.out.println(s+"\t"+df.format(posscore)+"\t"+df.format(negscore));
                ro=ro+s.trim()+"\t"+df.format(posscore)+"\t"+df.format(negscore)+"\n";
            }
            System.out.println("*************************************3********************************************");
            System.out.println();
            String header="**********************************************************************************\n           Orientation Finder Results for each aspects\n**********************************************************************************\nAspect\tPositiveScore\tNegativeScore\n";
            String footer="**********************************************************************************";
            jTextArea1.setText(header.trim()+"\n"+ro.trim()+"\n"+footer.trim());
        }
        catch(Exception e1)
        {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        FinalResult fr=new FinalResult();
        fr.setTitle("Final Result");
        fr.setVisible(true);
        fr.setResizable(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrientationFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrientationFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrientationFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrientationFinder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrientationFinder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
